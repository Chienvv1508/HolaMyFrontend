<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>@ViewData["Title"]</title>
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="~/lib/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="~/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="~/css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="~/css/style.css" rel="stylesheet" asp-append-version="true">
    <link rel="stylesheet" href="~/css/toast.css" />
    <style>
        .notification-dropdown {
            position: relative;
        }

        .notification-icon {
            cursor: pointer;
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            left: 15px;
            height: 20px;
            min-width: 20px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            padding: 2px 6px;
        }

        .notification-menu {
            position: absolute;
            top: 40px;
            right: 0;
            width: 350px;
            max-height: 250px;
            overflow: auto;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.15);
            z-index: 1000;
            display: none;
        }

        

        .notification-list {
            max-height: 250px;
            overflow-y: scroll;
        }

        .notification-item {
            padding: 10px 15px;
            border-bottom: 1px solid #f1f1f1;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

            .notification-item:last-child {
                border-bottom: none;
            }

            .notification-item.unread {
                background-color: #e7f3ff;
            }

            .notification-item:hover {
                background-color: #f1f1f1;
            }

            .notification-item .notification-icon-circle {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: #f0f2f5;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 10px;
            }

            .notification-item .notification-content {
                flex: 1;
            }

            .notification-item .notification-time {
                color: #6c757d;
                font-size: 12px;
            }

        .notification-empty {
            padding: 15px;
            text-align: center;
            color: #6c757d;
            font-style: italic;
        }

        .notification-footer {
            padding: 10px;
            border-top: 1px solid #f1f1f1;
            text-align: center;
        }

            .notification-footer button {
                background: none;
                border: none;
                color: #007bff;
                font-size: 14px;
                cursor: pointer;
            }

                .notification-footer button:hover {
                    text-decoration: underline;
                }
    </style>

</head>
<body>
    <!-- Spinner Start -->
    <div id="spinner" class="show w-100 vh-100 bg-white position-fixed translate-middle top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status"></div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar Start -->
    <div class="container-fluid fixed-top">
        <div class="container topbar bg-primary d-none d-lg-block">
            <div class="d-flex justify-content-between">
                <div class="top-info ps-2">
                    <small class="me-3"><i class="fas fa-map-marker-alt me-2 text-secondary"></i> <a href="#" class="text-white">Holamy, PRN232</a></small>
                    <small class="me-3"><i class="fas fa-envelope me-2 text-secondary"></i><a href="#" class="text-white">Group 1</a></small>
                </div>
                @* <div class="top-link pe-2">
                    <a href="#" class="text-white"><small class="text-white mx-2">Privacy Policy</small>/</a>
                    <a href="#" class="text-white"><small class="text-white mx-2">Terms of Use</small>/</a>
                    <a href="#" class="text-white"><small class="text-white ms-2">Sales and Refunds</small></a>
                </div> *@
            </div>
        </div>
        <!-- Topbar End -->
        <div class="container px-0">
            <nav class="navbar navbar-light bg-white navbar-expand-xl">
                <a href="/" class="navbar-brand"><h1 class="text-primary display-6">HolaMy</h1></a>
                <button class="navbar-toggler py-2 px-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars text-primary"></span>
                </button>
                <div class="collapse navbar-collapse bg-white" id="navbarCollapse">
                    <div class="navbar-nav mx-auto">
                        <a href="/Homepage" class="nav-item nav-link @(Context.Request.Path == "/Homepage" ? "active" : "")">Trang chủ</a>
                        <a href="/Buildings/BuildingList" class="nav-item nav-link @(Context.Request.Path == "/Buildings/BuildingList" ? "active" : "")">Nhà trọ</a>
                        <a href="/ShopDetail" class="nav-item nav-link ">Giới thiệu</a>
                        @* <div class="nav-item dropdown">
                            <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">Pages</a>
                            <div class="dropdown-menu m-0 bg-secondary rounded-0">
                                <a href="/Cart" class="dropdown-item">Cart</a>
                                <a href="/Checkout" class="dropdown-item">Checkout</a>
                                <a href="/Testimonial" class="dropdown-item">Testimonial</a>
                                <a href="/Error" class="dropdown-item">404 Page</a>
                            </div>
                        </div>
                        <a href="/Contact" class="nav-item nav-link">Contact</a> *@
                    </div>
                    <div class="d-flex m-3 me-0">
                        @* <button class="btn-search btn border border-secondary btn-md-square rounded-circle bg-white me-4" data-bs-toggle="modal" data-bs-target="#searchModal"><i class="fas fa-search text-primary"></i></button>
                        <a href="/Cart" class="position-relative me-4 my-auto">
                            <i class="fa fa-shopping-bag fa-2x"></i>
                            <span class="position-absolute bg-secondary rounded-circle d-flex align-items-center justify-content-center text-dark px-1" style="top: -5px; left: 15px; height: 20px; min-width: 20px;">@ViewData["CartCount"]</span>
                        </a>
                        *@
                        <div class="dropdown me-4 my-auto" id="notification-container">
                            <a href="#" class="notification-icon dropdown-toggle" id="notification-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-bell fa-2x"></i>
                                <span class="notification-badge" id="notification-count" style="display:none;"></span>
                            </a>

                            <div class="dropdown-menu dropdown-menu-end p-2" id="notification-menu" style=" max-height: 400px;overflow: auto;width:300px;" aria-labelledby="notification-toggle" style="width: 300px;">
                                <div id="notification-list">
                                </div>
                                <div class="notification-footer mt-2">
                                    <button id="load-more-notifications" class="btn btn-sm btn-secondary w-100 mb-1">Xem Thêm</button>
                                    <button id="mark-all-read" class="btn btn-sm btn-primary w-100">Đánh Dấu Đọc Hết</button>
                                </div>
                            </div>
                        </div>

                        <div id="auth-container" class="my-auto">
                            <a id="login-btn" href="/HomePage/Login" class="btn btn-primary rounded-pill px-3" style="display: none;">Đăng nhập</a>
                            <div id="user-profile" class="dropdown" style="display: none;">
                                <a href="#" class="d-flex align-items-center text-decoration-none dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <div id="user-avatar" class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 40px; height: 40px; font-size: 1.2rem;">
                                    </div>
                                    <span id="user-name" class="text-primary"></span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end rounded-0 m-0" aria-labelledby="userDropdown">
                                    <li><a class="dropdown-item" href="/Accounts/ViewProfileDetails">Xem thông tin tài khoản</a></li>
                                    <li><a class="dropdown-item" href="/Buildings/SavedBuildingList">Đã lưu </a></li>
                                    <li><a class="dropdown-item" href="/Reports/CustomerReports">Khiếu nại </a></li>
                                    <li><a class="dropdown-item" href="#" onclick="logout()">Đăng xuất</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

    @RenderBody()

    <!-- Footer Start -->
    <!-- Footer Start -->
    <div class="container-fluid bg-dark text-white-50 footer pt-5 mt-5">
        <div class="container py-5">
            <div class="row g-5">
                <!-- Logo + mô tả -->
                <div class="col-lg-3 col-md-6">
                    <h1 class="text-primary mb-3">HolaMy</h1>
                    <p class="text-secondary">Tìm kiếm nhà trọ, phòng trọ dễ dàng, tiện lợi với HolaMy. Luôn đồng hành cùng bạn trên mọi chặng đường an cư.</p>
                    <div class="d-flex pt-3">
                        <a class="btn btn-outline-secondary me-2 btn-md-square rounded-circle" href="#"><i class="fab fa-facebook-f"></i></a>
                        <a class="btn btn-outline-secondary me-2 btn-md-square rounded-circle" href="#"><i class="fab fa-youtube"></i></a>
                        <a class="btn btn-outline-secondary btn-md-square rounded-circle" href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>

                <!-- Về chúng tôi -->
                <div class="col-lg-3 col-md-6">
                    <h5 class="text-light mb-3">Về chúng tôi</h5>
                    <ul class="list-unstyled">
                        <li><a class="btn-link" href="/About">Giới thiệu</a></li>
                        <li><a class="btn-link" href="/Contact">Liên hệ</a></li>
                        <li><a class="btn-link" href="#">Chính sách bảo mật</a></li>
                        <li><a class="btn-link" href="#">Điều khoản sử dụng</a></li>
                    </ul>
                </div>

                <!-- Tài khoản -->
                <div class="col-lg-3 col-md-6">
                    <h5 class="text-light mb-3">Tài khoản</h5>
                    <ul class="list-unstyled">
                        <li><a class="btn-link" href="/Accounts/ViewProfileDetails">Thông tin tài khoản</a></li>
                        <li><a class="btn-link" href="/Buildings/SavedBuildingList">Đã lưu</a></li>
                        <li><a class="btn-link" href="/Cart">Giỏ hàng</a></li>
                        <li><a class="btn-link" href="#">Lịch sử đặt phòng</a></li>
                    </ul>
                </div>

                <!-- Liên hệ -->
                <div class="col-lg-3 col-md-6">
                    <h5 class="text-light mb-3">Liên hệ</h5>
                    <p><i class="fas fa-map-marker-alt me-2"></i> Holamy</p>
                    <p><i class="fas fa-envelope me-2"></i> support@holamy.vn</p>
                    <p><i class="fas fa-phone-alt me-2"></i> +84 964 017 318</p>
                    <img src="~/img/payment.png" class="img-fluid mt-2" alt="Các hình thức thanh toán">
                </div>
            </div>
        </div>
    </div>
    <!-- Footer End -->
    <!-- Footer End -->
    <!-- Copyright Start -->
    <div class="container-fluid copyright bg-dark py-4">
        <div class="container">
            <div class="row">
                <div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
                    <span class="text-light"><a href="#"><i class="fas fa-copyright text-light me-2"></i>Holamy</a>, All right reserved.</span>
                </div>
                <div class="col-md-6 my-auto text-center text-md-end text-white">
                    Designed By <a class="border-bottom" href="https://htmlcodex.com">Group 1</a>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/easing/easing.min.js"></script>
    <script src="~/lib/waypoints/waypoints.min.js"></script>
    <script src="~/lib/lightbox/js/lightbox.min.js"></script>
    <script src="~/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js"></script>

    <script src="~/js/main.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {

            const firebaseConfig = {
                apiKey: "AIzaSyDNviFvnFgrC42AouVAejbLT3c_IkQIqrU",
                authDomain: "authen-b7820.firebaseapp.com",
                projectId: "authen-b7820",
                storageBucket: "authen-b7820.firebasestorage.app",
                messagingSenderId: "896193465313",
                measurementId: "G-W3QDGZRXS7",
                appId: "1:896193465313:web:317d5b6e9eb067da2960a0"
            };
            firebase.initializeApp(firebaseConfig);

            updateAuthUI();

            // Mở chat tự động khi lần đầu vào Homepage + load lại tin nhắn cũ
            if (window.location.pathname === "/Homepage") {
                
                if (!localStorage.getItem('chatOpened')) {
                    document.getElementById('chat-window').classList.remove('d-none');
                    localStorage.setItem('chatOpened', 'true');
                }
            }
            
            updateAuthUI();

            const notificationToggle = document.getElementById('notification-toggle');
            const notificationMenu = document.getElementById('notification-menu');

            notificationToggle.addEventListener('click', (e) => {
                e.preventDefault();
                notificationMenu.classList.toggle('show');
            });
            document.addEventListener('click', (e) => {
                if (!notificationToggle.contains(e.target) && !notificationMenu.contains(e.target)) {
                    notificationMenu.classList.remove('show');
                }
            });
        });
    </script>

    <script>

        async function fetchUserProfile(token) {
            // const token = localStorage.getItem('jwtToken');
            if (!token) return null;

            try {
                const response = await fetch('http://localhost:8888/api/User/profile', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    return await response.json();
                } else {
                    console.error('Failed to fetch user profile:', await response.text());
                    return null;
                }
            } catch (error) {
                console.error('Error fetching user profile:', error);
                return null;
            }
        }
        function getCookie(name) {
            const cookieString = document.cookie;
            const cookies = cookieString.split(';');
            for (let cookie of cookies) {
                const index = cookie.indexOf('=');
                const key = cookie.substring(0, index).trim();
                const value = cookie.substring(index + 1);
                if (key === name) {
                    return decodeURIComponent(value);
                }
            }
            return null;
        }

        let socket;
        async function connect() {
            const userId = getCookie("userId");
            const token = getCookie("jwt");
            socket = new WebSocket(`ws://localhost:8888/ws?userId=${userId}`);

            socket.onopen = () => console.log("WebSocket opened for " + userId);
            socket.onmessage = async (e) => {
                const newNotification = JSON.parse(e.data);
                await appendNewNotification(token, newNotification);
            };
            socket.onclose = () => console.log("WebSocket closed.");
        }
        async function appendNewNotification(token, notification) {
            const notificationList = document.getElementById('notification-list');
            const notificationItem = document.createElement('div');
            notificationItem.className = `notification-item list-group-item ${notification.IsRead ? '' : 'unread'}`;
            notificationItem.dataset.id = notification.Id;

            notificationItem.innerHTML = `

                                        <div class="notification-content">
                                            <strong>${notification.Title}</strong><br>
                                            ${notification.Message}

                                        </div>
                                    `;
            notificationItem.addEventListener('click', async () => {
                if (!notification.isRead) {
                    await markNotificationAsRead(token, notification.id);
                    notificationItem.classList.remove('unread');
                    updateNotificationCount();
                }
                console.log(`Notification clicked: ${notification.title}`);
                if (notification.url) {
                    window.location.href = notification.url;
                }
            });

            notificationList.insertBefore(notificationItem, notificationList.firstChild);

            // const items = notificationList.getElementsByClassName('notification-item');
            // if (items.length > 5) {
            //     notificationList.removeChild(items[items.length - 1]);
            // }
            const markAllReadButton = document.getElementById('mark-all-read');
            markAllReadButton.style.display = document.querySelectorAll('.notification-item.unread').length > 0 ? 'block' : 'none';
            updateNotificationCount();
        }


        async function updateAuthUI() {
            const token = getCookie("jwt");
            const loginBtn = document.getElementById('login-btn');
            const userProfile = document.getElementById('user-profile');
            const userAvatar = document.getElementById('user-avatar');
            const userName = document.getElementById('user-name');
            const notificationContainer = document.getElementById('notification-container');
            const loadMoreButton = document.getElementById('load-more-notifications');
            const markAllReadButton = document.getElementById('mark-all-read');

            if (token) {
                const response = await fetchUserProfile(token);
                if (response) {
                    const user = response.data;
                    await connect();
                    loginBtn.style.display = 'none';
                    userProfile.style.display = 'flex';
                    const fullName = `${user.firstName} ${user.lastName}`;
                    userName.textContent = fullName;
                    if (user.avatar) {
                        userAvatar.innerHTML = `
                    <img src="${user.avatar}" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;">`;
                    } else {
                        const initial = user.firstName.charAt(0).toUpperCase();
                        userAvatar.textContent = initial;
                    }
                    notificationContainer.style.display = 'block';
                    currentPage = 1;
                    document.getElementById('notification-list').innerHTML = '';
                    await loadNotifications(token, currentPage);
                    loadMoreButton.onclick = async () => {
                        currentPage++;
                        await loadNotifications(token, currentPage);
                    };
                    markAllReadButton.onclick = async () => {
                        await markAllNotificationsAsRead(token);
                    };

                } else {
                    loginBtn.style.display = 'flex';
                    userProfile.style.display = 'none';
                    notificationContainer.style.display = 'none';
                }
            } else {
                loginBtn.style.display = 'flex';
                userProfile.style.display = 'none';
                notificationContainer.style.display = 'none';
            }
        }
        async function fetchNotifications(token, page, perPage) {
            try {
                const response = await fetch(`http://localhost:8888/api/Notifications?page=${page}&perPage=${perPage}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    return await response.json();
                } else {
                    console.error('Failed to fetch notifications:', await response.text());
                    return [];
                }
            } catch (error) {
                console.error('Error fetching notifications:', error);
                return [];
            }
        }

        async function markNotificationAsRead(token, notificationId) {
            try {
                const response = await fetch(`http://localhost:8888/api/Notification/notificationid=${notificationId}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },

                });

                if (!response.ok) {
                    console.error('Failed to mark notification as read:', await response.text());
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        }

        async function markAllNotificationsAsRead(token) {
            try {
                const response = await fetch('http://localhost:8888/api/NotificationAll', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },

                });

                if (response.ok) {
                    document.querySelectorAll('.notification-item.unread').forEach(item => {
                        item.classList.remove('unread');
                    });
                    updateNotificationCount();
                } else {
                    console.error('Failed to mark all notifications as read:', await response.text());
                }
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
            }
        }
        function updateNotificationCount() {
            const unreadCount = document.querySelectorAll('.notification-item.unread').length;
            const notificationCount = document.getElementById('notification-count');
            notificationCount.textContent = unreadCount;
            notificationCount.style.display = unreadCount > 0 ? 'flex' : 'none';
        }

        async function loadNotifications(token, page) {
            const notifications = await fetchNotifications(token, page, 5);
            const notificationList = document.getElementById('notification-list');
            // const loadMoreButton = document.getElementById('load-more-notifications');
            const markAllReadButton = document.getElementById('mark-all-read');
            const notificationEmpty = document.createElement('p');
            notificationEmpty.className = 'text-center text-muted mb-0';
            console.log("LoadNoti");

            if (notifications.length === 0 && page === 1) {
                notificationList.innerHTML = '';
                notificationList.appendChild(notificationEmpty);
                // loadMoreButton.style.display = 'none';
                // markAllReadButton.style.display = 'none';
                return;
            }


            notifications.forEach(notification => {
                const notificationItem = document.createElement('div');
                notificationItem.className = `notification-item list-group-item ${notification.isRead ? '' : 'unread'}`;
                notificationItem.dataset.id = notification.id;

                notificationItem.innerHTML = `

                                        <div class="notification-content">
                                            <strong>${notification.title}</strong><br>
                                            ${notification.message}

                                        </div>
                                    `;
                notificationItem.addEventListener('click', async () => {
                    if (!notification.isRead) {
                        await markNotificationAsRead(token, notification.id);
                        notificationItem.classList.remove('unread');
                        updateNotificationCount();
                    }
                    console.log(`Notification clicked: ${notification.title}`);
                    if (notification.url) {
                        window.location.href = notification.url;
                    }
                });
                notificationList.appendChild(notificationItem);
            });

            // const totalLoaded = notificationList.getElementsByClassName('notification-item').length;
            // loadMoreButton.style.display = totalLoaded < 50 && notifications.length === 5 ? 'block' : 'none';
            markAllReadButton.style.display = document.querySelectorAll('.notification-item.unread').length > 0 ? 'block' : 'none';
            updateNotificationCount();
        }


        function logout() {
            sessionStorage.removeItem('chatHistory'); // xoá lịch sử chat
            window.location.href = '/HomePage/Logout';
        }

            function toggleChat() {
            const chatWindow = document.getElementById('chat-window');
            const isOpen = !chatWindow.classList.contains('d-none');
            chatWindow.classList.toggle('d-none', isOpen);

            const chatHistory = JSON.parse(sessionStorage.getItem("chatHistory")) || [];

                if (!isOpen) {
            const chatHistory = JSON.parse(sessionStorage.getItem("chatHistory")) || [];
            if (chatHistory.length === 0) {
                const welcomeMessage = "Xin chào! Mình là HolaBot 👋\nBạn cần tìm phòng ở đâu, giá bao nhiêu? Hỏi mình nhé!";
                saveMessageToSession("HolaBot", welcomeMessage, false);
            } else {
                loadMessagesFromSession();
            }
        }

            loadMessagesFromSession();
        }

        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            if (!message) return;

            appendMessage('Bạn', message, true);
            saveMessageToSession('Bạn', message, false);
            input.value = '';

            try {
                const response = await fetch('http://localhost:8888/api/Chatbot/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': '*/*'
                    },
                    body: JSON.stringify({ message: message })
                });

                if (!response.ok) {
                    const fallback = 'Xin lỗi, hiện tại mình không thể trả lời. Vui lòng thử lại sau.';
                    appendMessage('HolaBot', fallback, false);
                    saveMessageToSession('HolaBot', fallback, false);
                    return;
                }

                const data = await response.json();
                const botMessage = convertMarkdownToHTML(data.response);
                appendMessage('HolaBot', botMessage, false, true);
                saveMessageToSession('HolaBot', botMessage, true);

            } catch (error) {
                console.error('Chatbot error:', error);
                const errMsg = 'Đã xảy ra lỗi. Bạn vui lòng thử lại sau nhé!';
                appendMessage('HolaBot', errMsg, false);
                saveMessageToSession('HolaBot', errMsg, false);
            }
        }

        function appendMessage(sender, text, isUser, isHtml = false) {
            const chat = document.getElementById('chat-messages');
            const msg = document.createElement('div');
            msg.className = `mb-2 ${isUser ? 'text-end' : 'text-start'}`;
            msg.innerHTML = `<div class="d-inline-block px-3 py-2 rounded ${isUser ? 'bg-primary text-white' : 'bg-light text-dark'}" style="max-width: 90%; white-space: pre-wrap;">${isHtml ? text : escapeHtml(text)}</div>`;
            chat.appendChild(msg);
            chat.scrollTop = chat.scrollHeight;
        }

        function escapeHtml(text) {
            return text.replace(/[&<>"']/g, function (match) {
                return {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                }[match];
            });
        }

        function convertMarkdownToHTML(markdown) {
            return markdown
                .replace(/!\[.*?\]\((.*?)\)/g, '<img src="$1" class="img-fluid rounded my-2" style="max-height:150px;">')
                .replace(/\((https?:\/\/[^\s()]+\.(jpg|jpeg|png|gif|webp)(\?[^()\s]*)?)\)/gi,
                         '<img src="$1" class="img-fluid rounded my-2" style="max-height:150px;">')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')
                .replace(/\n/g, '<br>');
        }

        function saveMessageToSession(sender, message, isHtml = false) {
            let chatHistory = JSON.parse(sessionStorage.getItem("chatHistory")) || [];
            chatHistory.push({ sender, message, isHtml });
            sessionStorage.setItem("chatHistory", JSON.stringify(chatHistory));
        }

        function loadMessagesFromSession() {
            const chatHistory = JSON.parse(sessionStorage.getItem("chatHistory")) || [];
            for (let msg of chatHistory) {
                appendMessage(msg.sender, msg.message, msg.sender === 'Bạn', msg.isHtml);
            }
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.4.1/purify.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        @if (TempData["ToastType"] != null && TempData["ToastTitle"] != null && TempData["ToastMessage"] != null)
        {
            <text>
                    showToast('@TempData["ToastType"]', '@TempData["ToastTitle"]', '@TempData["ToastMessage"]');
            </text>
        }
            });
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>

<!-- ChatBot Start -->
<div id="chatbot" class="position-fixed bottom-0 end-0 m-4" style="z-index: 1050;">
    <div id="chat-window" class="card shadow-lg d-none" style="width: 320px; height: 400px; border-radius: 1rem;">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center rounded-top">
            <span><i class="fas fa-robot me-2"></i> HolaMy ChatBot</span>
            <button class="btn btn-sm btn-light" onclick="toggleChat()"><i class="fas fa-times"></i></button>
        </div>
        <div class="card-body p-3 overflow-auto" id="chat-messages" style="height: 280px; background-color: #f9f9f9;"></div>
        <div class="card-footer p-2 border-top">
            <div class="input-group">
                <input id="chat-input" type="text" class="form-control" placeholder="Nhập tin nhắn..." onkeydown="if(event.key==='Enter') sendMessage()">
                <button class="btn btn-primary" onclick="sendMessage()"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>
    <button id="chat-toggle-btn" class="btn btn-primary btn-lg rounded-circle shadow" onclick="toggleChat()">
        <i class="fas fa-comments"></i>
    </button>

</div>
<!-- ChatBot End -->
<!-- Back to Top -->
<a href="#" class="btn btn-primary border-3 border-primary rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
<style>

    #chat-toggle-btn {
        width: 45px;
        height: 45px;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px; /* tùy chỉnh nếu icon to/nhỏ quá */
    }

    #chatbot #chat-window {
        animation: fadeInUp 0.3s ease-in-out;
    }

    #chat-window{
        position: fixed;
        bottom: 20px;
        right: 55px;
        z-index: 1050;
    }


        /* Nút Chatbot */
        #chatbot #chat-toggle-btn {
            position: fixed;
            bottom: 20px; /* giữ cố định 60px từ dưới */
            right: 7px; /* theo đúng vị trí cũ */
            z-index: 1050;
        }


    /* Nút Back-to-top */
    .back-to-top {
        position: fixed;
        bottom: 80px; /* cao hơn nút Chatbot 60px */
        right: 7px; /* cùng canh phải với Chatbot */
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1060; /* vượt trên Chatbot */
        transition: opacity .3s;
    }

        .back-to-top:hover {
            opacity: .8;
        }



   fadeInUp {
        from

    keyframes fadeInUp {
    from {
        transform: translateY(20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
</style>
</html>