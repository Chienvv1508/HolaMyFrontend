@page
@model HolaMyFrontend.Pages.Buildings.SavedBuildingListModel
@{
    ViewData["Title"] = "Danh sách nhà trọ yêu thích";
}

<!-- Single Page Header start -->
<div class="container-fluid page-header py-5">
    <h1 class="text-center text-white display-6">Danh sách nhà trọ yêu thích</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
        <li class="breadcrumb-item active text-white">Nhà trọ yêu thích</li>
    </ol>
</div>
<!-- Single Page Header End -->
<!-- Toast Notification Container -->
<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

<!-- Saved Buildings Start -->
<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <div class="row g-4">
            <div class="col-lg-12">
                <div class="row g-4 justify-content-center">
                    @if (Model.SavedBuildings.Any())
                    {
                        foreach (var building in Model.SavedBuildings)
                        {
                            <div class="col-md-6 col-lg-6 col-xl-4">
                                <div class="rounded position-relative fruite-item">
                                    <div class="fruite-img">
                                        <img src="@building.ThumbnailUrl" class="img-fluid w-100 rounded-top" alt="@building.BuildingName" onerror="this.src='/img/placeholder.jpg'" />
                                    </div>
                                    <div class="text-white bg-secondary px-3 py-1 rounded position-absolute" style="top: 10px; left: 10px;">@building.Ward.WardName</div>
                                    <div class="p-4 border border-secondary border-top-0 rounded-bottom">
                                        <h4>@building.BuildingName</h4>
                                        <p class="description">Giá từ: @(building.RoomPrice?.ToString("N0") ?? "Liên hệ") VNĐ/tháng</p>
                                        <p class="description">Địa chỉ: @(building.AddressDetail ?? "Không có thông tin")</p>
                                        <p class="description">Loại phòng: @(building.RoomTypeName ?? "Không xác định")</p>
                                        <div class="d-flex justify-content-between flex-lg-wrap">
                                            <a href="/Buildings/BuildingDetail/@building.BuildingId" class="btn border border-secondary rounded-pill px-3 text-primary">
                                                <i class="fa fa-eye me-2 text-primary"></i> Xem chi tiết
                                            </a>
                                            <button class="btn border border-secondary rounded-pill px-3 text-danger remove-favorite-btn" data-saved-id="@building.SavedId" onclick="removeFavorite(@building.SavedId)">
                                                <i class="fa fa-trash me-2"></i> Xóa
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12 text-center">
                            <p>Không có nhà trọ yêu thích nào.</p>
                        </div>
                    }
                    <div class="col-12">
                        <div class="pagination d-flex justify-content-center mt-5">
                            <a href="?page=@(Model.CurrentPage - 1)" class="rounded @(Model.CurrentPage == 1 ? "disabled" : "")">«</a>
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <a href="?page=@i" class="rounded @(Model.CurrentPage == i ? "active" : "")">@i</a>
                            }
                            <a href="?page=@(Model.CurrentPage + 1)" class="rounded @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">»</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Saved Buildings End -->

<form id="deleteForm" method="post" asp-page-handler="Delete">
    <input type="hidden" name="savedId" id="savedIdInput" />
    @Html.AntiForgeryToken()
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const toastContainer = document.getElementById('toastContainer');

        // Show toast if TempData exists
        const showToast = (type, title, message) => {
            const toast = document.createElement('div');
            toast.className = `custom-toast ${type === 'error' ? 'error' : ''}`;
            toast.innerHTML = `
                    <span class="toast-icon"></span>
                    <div>
                        <span class="toast-title">${title}</span>
                        <p class="toast-message">${message}</p>
                    </div>
                    <button type="button" class="toast-close" onclick="this.parentElement.style.display='none'">×</button>
                `;
            toastContainer.appendChild(toast);
            toast.style.display = 'block';

            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    toast.style.display = 'none';
                    toastContainer.removeChild(toast);
                }, 500);
            }, 4500);
        };

        // Check for SuccessMessage
        const successMessage = '@Html.Raw(TempData["SuccessMessage"]?.ToString() ?? "")';
        if (successMessage) {
            showToast('success', 'Thành công', successMessage);
            TempData.remove('SuccessMessage'); // Clear TempData after showing
        }

        // Check for ErrorMessage
        const errorMessage = '@Html.Raw(TempData["ErrorMessage"]?.ToString() ?? "")';
        if (errorMessage) {
            showToast('error', 'Lỗi', errorMessage);
            TempData.remove('ErrorMessage'); // Clear TempData after showing
        }

        // Remove favorite function
        function removeFavorite(savedId) {
            if (confirm('Bạn có chắc muốn xóa nhà trọ này khỏi danh sách yêu thích?')) {
                const token = localStorage.getItem('jwtToken');
                console.log('Token:', token ? token.substring(0, 20) + '...' : 'null');
                if (!token) {
                    alert('Vui lòng đăng nhập để thực hiện thao tác này.');
                    window.location.href = '/HomePage/Login';
                    return;
                }

                document.getElementById("savedIdInput").value = savedId;
                document.getElementById("deleteForm").submit();
            }
        }
    });

    // Custom CSS for Toast
    const style = document.createElement('style');
    style.textContent = `
            .custom-toast {
                display: none;
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 1050;
                background: linear-gradient(90deg, #e0f7f9 50%, #a5d6a7 50%);
                color: #1a3c34;
                border-radius: 10px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                padding: 15px 20px;
                max-width: 300px;
                font-family: Arial, sans-serif;
                opacity: 1;
                transition: opacity 0.5s ease-out;
            }
            .custom-toast.error {
                background: linear-gradient(90deg, #ffebee 50%, #ef5350 50%);
            }
            .custom-toast .toast-icon {
                width: 24px;
                height: 24px;
                background: #4caf50;
                border-radius: 50%;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                margin-right: 10px;
            }
            .custom-toast.error .toast-icon {
                background: #ef5350;
            }
            .custom-toast .toast-icon::before {
                content: "✔";
                color: white;
                font-size: 16px;
            }
            .custom-toast.error .toast-icon::before {
                content: "✖";
            }
            .custom-toast .toast-close {
                float: right;
                font-size: 18px;
                cursor: pointer;
                color: #1a3c34;
                background: none;
                border: none;
                padding: 0;
            }
            .custom-toast .toast-title {
                font-weight: bold;
                margin-bottom: 5px;
            }
            .custom-toast .toast-message {
                font-size: 14px;
                margin: 0;
            }
        `;
    document.head.appendChild(style);
</script>